{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2022,
    "sourceType": "module",
    "project": ["./tsconfig.json"]
  },
  "plugins": ["rxjs"],
  "overrides": [
    {
      "files": ["*.ts", "*.js"],
      "extends": ["plugin:rxjs/recommended"],
      "rules": {
        "@typescript-eslint/consistent-type-assertions": [
          "error",
          {
            "assertionStyle": "as"
          }
        ],
        "rxjs/no-implicit-any-catch": "off",
        "rxjs/finnish": ["error", { "properties": false }]
      }
    },
    {
      "files": ["*.ts"],
      "extends": ["plugin:@angular-eslint/template/process-inline-templates"],
      "rules": {
        "@typescript-eslint/naming-convention": [
          "warn",
          {
            "selector": ["memberLike"],
            "modifiers": ["private"],
            "format": ["camelCase"],
            "leadingUnderscore": "require"
          }
        ],
        "prefer-arrow-callback": "error",
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "overrides": {
              "constructors": "no-public"
            }
          }
        ],
        "@typescript-eslint/explicit-function-return-type": [
          "error",
          {
            "allowExpressions": true
          }
        ],
        "@typescript-eslint/array-type": [
          "error",
          {
            "default": "generic"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "clp",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "clp",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/no-conflicting-lifecycle": "error",
        "@angular-eslint/no-host-metadata-property": "error",
        "@angular-eslint/no-input-rename": "error",
        "@angular-eslint/no-inputs-metadata-property": "error",
        "@angular-eslint/no-output-native": "error",
        "@angular-eslint/no-output-on-prefix": "error",
        "@angular-eslint/no-output-rename": "error",
        "@angular-eslint/no-outputs-metadata-property": "error",
        "@angular-eslint/use-lifecycle-interface": "error",
        "@angular-eslint/use-pipe-transform-interface": "error",
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-namespace": "off",
        "@typescript-eslint/dot-notation": "off",
        "@typescript-eslint/member-ordering": [
          "error",
          {
            // Taken default configuration
            // https://typescript-eslint.io/rules/member-ordering/#default-configuration
            // and tweaked.
            "default": [
              // Index signature
              "signature",
              "call-signature",

              // Fields
              "private-static-field",
              "#private-static-field",
              "protected-static-field",
              "public-static-field",

              "public-decorated-field",
              "protected-decorated-field",
              "private-decorated-field",

              "private-instance-field",
              "#private-instance-field",
              "protected-instance-field",
              "public-instance-field",

              "protected-abstract-field",
              "public-abstract-field",

              "private-field",
              "#private-field",
              "protected-field",
              "public-field",

              "static-field",
              "instance-field",
              "abstract-field",

              "decorated-field",

              "field",

              // Static initialization
              "static-initialization",

              // Constructors
              "private-constructor",
              "protected-constructor",
              "public-constructor",

              "constructor",

              // Getters
              "public-static-get",
              "protected-static-get",
              "private-static-get",
              "#private-static-get",

              "public-decorated-get",
              "protected-decorated-get",
              "private-decorated-get",

              "public-instance-get",
              "protected-instance-get",
              "private-instance-get",
              "#private-instance-get",

              "public-abstract-get",
              "protected-abstract-get",

              "public-get",
              "protected-get",
              "private-get",
              "#private-get",

              "static-get",
              "instance-get",
              "abstract-get",

              "decorated-get",

              "get",

              // Setters
              "public-static-set",
              "protected-static-set",
              "private-static-set",
              "#private-static-set",

              "public-decorated-set",
              "protected-decorated-set",
              "private-decorated-set",

              "public-instance-set",
              "protected-instance-set",
              "private-instance-set",
              "#private-instance-set",

              "public-abstract-set",
              "protected-abstract-set",

              "public-set",
              "protected-set",
              "private-set",
              "#private-set",

              "static-set",
              "instance-set",
              "abstract-set",

              "decorated-set",

              "set",

              // Methods
              // https://github.com/angular-eslint/angular-eslint/issues/995
              // Once the above is implemented, we can think about ordering methods [cas@25/05/2023]
              "public-static-method",
              "protected-static-method",
              "private-static-method",
              "#private-static-method",

              "public-decorated-method",
              "protected-decorated-method",
              "private-decorated-method",

              "public-instance-method",
              "protected-instance-method",
              "private-instance-method",
              "#private-instance-method",

              "public-abstract-method",
              "protected-abstract-method",

              "public-method",
              "protected-method",
              "private-method",
              "#private-method",

              "static-method",
              "instance-method",
              "abstract-method",

              "decorated-method",

              "method"
            ]
          }
        ],
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-inferrable-types": [
          "error",
          {
            "ignoreParameters": true
          }
        ],
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-shadow": [
          "error",
          {
            "hoist": "all"
          }
        ],
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/unified-signatures": "error",
        "arrow-body-style": "error",
        "constructor-super": "error",
        "eqeqeq": ["error", "smart"],
        "guard-for-in": "error",
        "id-blacklist": "off",
        "id-match": "off",
        "import/no-deprecated": "warn",
        "import/order": "error",
        "no-bitwise": "error",
        "no-caller": "error",
        "no-console": [
          "error",
          {
            "allow": [
              "log",
              "warn",
              "dir",
              "timeLog",
              "assert",
              "clear",
              "count",
              "countReset",
              "group",
              "groupEnd",
              "table",
              "dirxml",
              "error",
              "groupCollapsed",
              "Console",
              "profile",
              "profileEnd",
              "timeStamp",
              "context"
            ]
          }
        ],
        "no-debugger": "error",
        "no-empty": "off",
        "no-eval": "error",
        "no-fallthrough": "error",
        "no-new-wrappers": "error",
        "no-restricted-imports": ["error", "rxjs/Rx"],
        "no-throw-literal": "error",
        "no-undef-init": "error",
        "no-underscore-dangle": "off",
        "no-var": "error",
        "prefer-const": "error",
        "radix": "error"
      },
      "plugins": [
        "eslint-plugin-import",
        "@angular-eslint/eslint-plugin",
        "@typescript-eslint"
      ]
    },
    {
      "files": ["*.html"],
      "extends": [
        "plugin:@angular-eslint/template/accessibility",
        "plugin:@angular-eslint/template/recommended"
      ]
    }
  ]
}
